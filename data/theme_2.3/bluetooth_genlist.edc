/*
* ug-bluetooth-efl
*
* Copyright 2012 Samsung Electronics Co., Ltd
*
* Contact: Hocheol Seo <hocheol.seo@samsung.com>
*           GirishAshok Joshi <girish.joshi@samsung.com>
*           DoHyun Pyun <dh79.pyun@samsung.com>
*
* Licensed under the Flora License, Version 1.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.tizenopensource.org/license
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#define BT_POPUP_PAD_W 18
#define POPUP_HEIGHT_LANDSCAPE 55
#define POPUP_EDITFIELD_LAYOUT_MINMAX_HEIGHT_INC 96
/* #define POPUP_WITH_2_GL_ITEMS 237 -> Z1's popup size */
#define POPUP_WITH_2_GL_ITEMS 145
#define BUTTON_CIRCLE_LABEL_SIZE 80 80
#define BUTTON_CIRCLE_SIZE 40 40
#define BUTTON_CIRCLE_TOP_PADDING_HEIGHT 30
#define BUTTON_CIRCLE_LEFT_RIGHT_PADDING_WIDTH 8
#define BUTTON_CIRCLE_MIDDDLE_PADDING_HEIGHT 0
#define BUTTON_CIRCLE_BOTTOM_PADDING_HEIGHT 15

#define RESOURCE_IMAGE( FILE_NAME ) \
   group { \
      name: FILE_NAME; \
      images.image: FILE_NAME COMP; \
      parts { \
         part { name: "image"; \
            description { \
               state: "default" 0.0; \
               image.normal: FILE_NAME; \
               aspect: 1 1; \
               aspect_preference: BOTH; \
            } \
         } \
      } \
   }

externals {
	external: "elm";
	external: "feedback";
}

collections {
	RESOURCE_IMAGE("bluetooth_btn_bg.png");
	RESOURCE_IMAGE("bluetooth_btn_icon_info.png");

	plugins {
		plugin {
			name: "touch_sound";
			source: "feedback";
			param: "FEEDBACK_TYPE_SOUND FEEDBACK_PATTERN_TAP";
		}
	}

	group {
		name: "main_rename_device_ly";
		parts {
			part {
				name:"pad_t";
				type: SPACER;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 0;
					align: 0.5 0.0;
					fixed: 0 1;
					rel2.relative: 1.0 0.0;
				}
			}
			part {
				name:"elm.swallow.layout";
				type: SWALLOW;
				scale: 1;
				mouse_events: 1;
				repeat_events: 1;
				description {
					state: "default" 0.0;
					min: 0 POPUP_WITH_2_GL_ITEMS;
					align: 0.5 1.0;
					fixed: 1 0;
					rel1 {
						relative: 1.0 1.0;
						to_x: "pad_l";
						to_y: "pad_t";
					}
					rel2 {
						relative: 0.0 0.0;
						to_x: "pad_r";
						to_y: "pad_b";
					}
				}
			}

			part {
				name:"pad_b";
				type: SPACER;
				scale: 1;
				description {
					state: "default" 0.0;
					align: 0.5 1.0;
					min: 0 0;
					fixed: 0 1;
					rel1.relative: 0.0 1.0;
				}
			}

			part {
				name: "pad_l";
				type: SPACER;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 0;
					fixed: 0 0;
					align: 0.0 0.0;
					rel1 {
						relative: 0.0 0.0;
					}
					rel2 {
						relative: 0.0 1.0;
					}
				 }
			}

			part {
				name: "pad_r";
				type: SPACER;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 0;
					fixed: 0 0;
					align: 1.0 0.0;
					rel1 {
						relative: 1.0 0.0;
					}
					rel2 {
						relative: 1.0 1.0;
					}
				}
			}
		}
	}

	group { name: "profile_rename_device_ly";
		inherit: "main_rename_device_ly";
		parts {
			part {
				name:"pad_t";
				type: SPACER;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 20;
					align: 0.5 0.0;
					fixed: 0 1;
					rel2.relative: 1.0 0.0;
				}
			}
			part {
				name:"elm.swallow.layout";
				type: SWALLOW;
				scale: 1;
				mouse_events: 1;
				repeat_events: 1;
				description {
					state: "default" 0.0;
					min: 0 POPUP_HEIGHT_LANDSCAPE;
					align: 0.5 1.0;
					fixed: 1 0;
					rel1 {
						relative: 1.0 1.0;
						to_x: "pad_l";
						to_y: "pad_t";
					}
					rel2 {
						relative: 0.0 0.0;
						to_x: "pad_r";
						to_y: "pad_b";
					}
				}
			}
			part {
				name:"pad_b";
				type: SPACER;
				scale: 1;
				description {
					state: "default" 0.0;
					align: 0.5 1.0;
					min: 0 15;
					fixed: 0 1;
					rel1.relative: 0.0 1.0;
				}
			}
		}
	}
	group {
		name: "elm/button/base/info_button";
		script {
			public mouse_down = 0;
			public multi_down = 0;
		}
		images {
			image: "bluetooth_btn_bg.png" COMP;
			image: "bluetooth_btn_icon_info.png" COMP;
		}
		parts {
			part { name: "bg";
				type: SPACER;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: BUTTON_CIRCLE_SIZE;
					max: BUTTON_CIRCLE_SIZE;
				}
			}
			part {
				name: "bg_image";
				scale: 1;
				description {
					state: "default" 0.0;
					rel1.to: "bg";
					rel2.to: "bg";
					image.normal: "bluetooth_btn_bg.png";
					color_class: "AO004";
				}
				description {
					state: "pressed" 0.0;
					inherit: "default" 0.0;
					color_class: "AO004P";
				}
				description {
					state: "disabled" 0.0;
					inherit: "default" 0.0;
					color_class: "AO004D";
				}
			}
			part { name: "button";
				mouse_events: 0;
				scale: 1;
				description {
					state: "default" 0.0;
					min: BUTTON_CIRCLE_SIZE;
					max: BUTTON_CIRCLE_SIZE;
					rel1.to: "bg_image";
					rel2.to: "bg_image";
					image.normal: "bluetooth_btn_icon_info.png";
				}
				description {
					state: "visible" 0.0;
					inherit: "default" 0.0;
					color_class: "AO003P";
				}
				description {
					state: "disabled" 0.0;
					inherit: "default" 0.0;
					color_class: "AO003D";
				}
			}
			part {
				name: "event";
				scale: 1;
				type: RECT;
				description {
					state: "default" 0.0;
					rel1.to:"bg";
					rel2.to:"bg";
					color: 0 0 0 0;
				}
			}
		}
		programs {
			program {
				name: "pressed";
				signal: "mouse,down,1*";
				source: "event";
				script {
					if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
					{
						set_int(mouse_down, 1);
						run_program(PROGRAM:"button_press1");
					}
				}
			}
			program {
				name: "button_press1";
				script {
					new st[31];
					new Float:vl;
					get_state(PART:"bg", st, 30, vl);
					if (strcmp(st, "disabled")) {
						//set_state(PART:"base", "pressed", 0.0);
						set_state(PART:"bg_image", "pressed", 0.0);
						set_state(PART:"button", "pressed", 0.0);
						emit("elm,action,press", "");
					}
				}
			}
			program {
				name: "unpressed";
				signal: "mouse,up,1";
				source: "event";
				script {
					if (get_int(mouse_down) == 1) {
						set_int(mouse_down, 0);
						run_program(PROGRAM:"button_unpress1");
					}
				}
			}
			program {
				name: "button_unpress1";
				script {
					new st[31];
					new Float:vl;
					get_state(PART:"bg", st, 30, vl);
					if (strcmp(st, "disabled")) {
						//set_state(PART:"base", "default", 0.0);
						set_state(PART:"bg_image", "default", 0.0);
						set_state(PART:"button", "default", 0.0);
						emit("elm,action,unpress", "");
					}
				}
			}
			program {
				name: "touch_snd";
				signal: "mouse,clicked,1";
				source: "event";
				script {
					new st[31];
					new Float:vl;
					if (get_int(multi_down) == 0) {
						get_state(PART:"bg", st, 30, vl);
						if (strcmp(st, "disabled")) {
							run_program(PROGRAM:"touch_sound");
							emit("elm,action,click", "");
						}
					}
				}
			}
			program {
				name: "touch_sound";
				action: RUN_PLUGIN "touch_sound";
			}
			program {
				name: "icon_show";
				signal: "elm,state,icon,visible";
				source: "elm";
				action: STATE_SET "visible" 0.0;
				target: "button";
			}
			program {
				name: "icon_hide";
				signal: "elm,state,icon,hidden";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "button";
			}
			program {
				name: "disable";
				signal: "elm,state,disabled";
				source: "elm";
				action: STATE_SET "disabled" 0.0;
				target: "bg";
				//target: "bg_effect";
				target: "button";
			}
			program {
				name: "enable";
				signal: "elm,state,enabled";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "bg";
				//target: "bg_effect";
				target: "button";
			}
			program {
				name: "multi_down";
				signal: "elm,action,multi,down";
				source: "elm";
				script {
					set_int(multi_down, 1);
				}
			}
			program {
				name: "multi_up";
				signal: "elm,action,multi,up";
				source: "elm";
				script {
					set_int(multi_down, 0);
				}
			}
		}
	}
}
